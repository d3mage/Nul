{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"GuardianBlocking","functions":[{"name":"add_guardian","hash":"2954216841963877448","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"guardian","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["add_guardian"],"brillig_names":["discover_new_messages","random","notify_created_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"approve_blocking","hash":"10302659072362419142","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13488305543605632947":{"error_kind":"string","string":"Already blocked"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17022728796570737336":{"error_kind":"string","string":"Not a guardian"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"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","debug_symbols":"","names":["approve_blocking"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","storage_read","get_public_data_witness","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"check_block_user","hash":"2527408137032590380","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7049597037775588060":{"error_kind":"string","string":"Function check_block_user can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["check_block_user"],"brillig_names":["check_block_user"]},{"name":"constructor","hash":"17192357828608188479","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"portal","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"decrement_guardian_count","hash":"12106667003729952726","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15111608787814000058":{"error_kind":"string","string":"Function decrement_guardian_count can only be called internally"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dPYgkaRn+qrp7Znp6Znp21wNThYNDk6r+n0Rbd/b+5M7TC4QD8fpXFvfuZG9PDSswMjAzFQNNDDQQDAQVRBBMBJODSw4UNDExNDh0a6femaeffqq6arpqZne9D4bqqu/93v/3/X6rxnMXxUuudbp3AmacXIPtSlgirkAymlUM5s3a2bWZ3PtQXytR2CbRLRP/KOjNmkK+EvnvNhOcVerHcFaAP9hN8HwpusDPssTlMLlHH7I2ew//DtzF72eS301qU4VtK9R9cEvw74NscbkdVUK7a/hPAb8rUTbDf6ca/s/xP5/gr4L3F6rRzXlOerEa3Zzjf6ka/D3D/3JUtu57vZY7i/E3EqUfutU8gfbgq3OrecyKxdSxwHUardKpl0gHcT1PdBol0LH8tAN14+QabFc6x8Qn0jlIZIzL5Dtvffnbs3fmiy/M5/cX777rkVy7gn9ViuDcK4Dzk4zz1ffu3bu7vLu4f+d7d999sIa7KXDbb99p2ZgvhMPSIBrPJte43ZveBc9t5vn1xdvzxf3HSbWORGkInvaozmA/k1zj+llCqOnWVTpOrsF2pW+4D4C3EtPh3EL60K0Xqzsi2ljXhro61R1DXYPqbkDdLtXdBB4sTVvdLWinUo6VGt2jDmPbLSFFM5wjftCvjqgOQ65NdftQd0x1LagzXcT8fSL5fe7rX7z3zuxbr7731nQ9htAnskrNrduR/clgDoWsiAPbHRKOplu3e3m+GobsO1jYd9BuyneaVPcJqNunumegDu3GRfmc6SLm5V8FfA51e5Pq0I63qA7jEWXinKbsaW19t+7be25VTvZvjBH0J3zeJBiPnvspuA9Jjn0Br2KU5UbekRfD13Tar8fJfbBdWbD9sCj7ca7FuOJci/mUcy3GBOfaW8AD51r2H+fy+73psGiuLTOfWh36OOqC5WJfigtOc9AmO/AbYXjcYDDz5BrXv5KMsXjccN19O+dE9EXOieiLLapDX8zqo5Tf7IKeiuRLnGpwH43rk+xTOEUwmWQ//PqDd+5Pvrn46mIy91J49jL4zNKFyknsE1n51IlnnsBjbbPGq515fxGcjKajznTSHU573enJySTshoMwHC3nnWDe6yz74WAwO1mcLMPuctpfTAb9yclgHi6CyWDOtPwM2Yr0Iypfp+HgfsZ+t0g3abpU/Lcy+D9M4R9hsP2h4P8whU/k6SiDf2vTdOs5bJxcu0G3u5h0eoNFPxgsRiejxclw2R8Gs8lyOR8+XDOcBtNpbxB0Y7sOO8G0c7IIuyeL/ix8NAAzWjxOOBLym1yYJ7hvU+PSY7eum+MUHaBtb5Bu2qIN3/uiLdu2nUIbYXaFjGk4VK5Q/B+JNnn4Z/3fSOE/LafcEPwr+xoOXzwvooNaCq9Mh33ed9k2Ur5ZJO5qbrMPIF9Hgi/Endm3ZMzxEEdWMZo3U9qiPBhPNwUOxTfLa88bKe14TL1PeMbJfbBd6TeIn58m13h89mOSS41ZWC7zQd9tzj9Yl+aP+wSv+i70ex7X+gJXLNvPCUdWfOXldY94bQv4GwVlU/k/r2zMB+JFX/MJ/hhwKXjDx77zi+Qa6+E1fxWnD20UThtH+nSPbfPwj3HqC/xsU6SrcGMfifd+Cp2603Ij7w2Bvybood2ahD8u4+QabFU6QcXz9uWhkMeKmg/tUN2NFP1y2TSPft2/wMtwzI+a1zAPamzOWzt8XxN4eBs+LuPkGmxVeue25TF9OfjLtS3qhouyrclU1LboQ2xbjG/u53h7kO/zxjWOp5tu3U/GyTXYqvRGTSHDda6PsO3bKbrjomxvMhW1PcYBz2u4D0Kb8fyWt6TrAk91OXswqjiuS7Vt0Zx92bhGH2Lbcs7GMd5lcraKa1wzqM72w4DXKJ4m25tMRW2P9txke7QZrw1wXDcEnppbl02N83hczTx7RCsuTaf7knFyH2xXeh7RM37xGdLfJ15L5if03HrM1dy6fnzS3Y7g9Zjq4mJHbzxRVxPP/CvGVWL/3+UHh4Iu+1lFeyf9vH5m9Pfdul2r8LNd4ifNZursgrU9duv5nn1D7ZnuCTpPCi70Ue5vrV5djQ4/YzqY7zyi45VIB9txv7VTIh3EdSdapcN9jrrmpYO4TqOz6+M2PmC/wfEB2zrvXDHtzJPJ6tyq3qxsGnN8P8eY4/9dv9uM6T7W72b94riRS5n6fVzmjlXqN68Occ75uwLzjqyzjZ5oW/H4Pve462kY3xuvDvBddkzOeW1bXH6JuPgcJu4T2dgihn/FW6Wp9lyw7UvRRT3Cf8W7wPla8rvl9LwW8dkznkPjuR3WC66PZPlFlh/VBT9tQc/axvzYmVQ+n/S1+3cfLBwVf4OAvoBzBOM5vUiACrSDcGxobIuGtqRVj1Z5GyfPgy3KcBQEZohagt8ciUsd6hH+GwkClMOu9S34XA4n4bI7WU76k/m8N5vcJPwO9NWqgP50ES66y+Wyu5j0loPlldOfh9Nhd9QJpoN+t9OfbqSv3qlqASx3ThW9LJF78cno7xOvVXVOB8QP64c7p0PB6zHVxYUn31kHaJDOVeFie8dlnFyDYqXDD9QgkP2MDwNdkjaX3IMgo7/v1u1ahZ+pF0KUzdRA2NoeU11c2DeyDpAhnScFF/ooH0q3enU1OvyM6WC+48PYrRLpqEOsWXFyWTqIywaIPPEqgw7iOo3OrhbbfFh1nNwHW5Uw4IkglqwD9GqizbbGF5zYPvgyB0/08AWnoosjpqeik3ekc50HOli/qHvWrzpcqXTP+kXd48SIi9Kv6amofivaiHis9JtXh6aLoosj6qBNde+t90LWi01s1XvsfN8gnuNi/VeD8H6YCBu3/aW3KlerfLm6xutBhlwss8G+D7z+yluVPU1PcXk5Rfa/AL5fVy/7YBvZ/wS8/qZ6Xofb8Pp74q+isWjAc0Wmhfxi/GLcnEZavj8kSOM88T7kifjxLtHAOlxE5TGwehlJrY8YrzGf//TKkefPT5k8f33K5PngKZPnb4+ZPKof5xdZMY/wphYuvvIitjpcmbZWdQ0HWHKvVX18gOVqcHEcGH51NTr8LO3wBOpQHW65E51dY5iPKNYNP26yYFv7hluD4D/nX+A0xtouPabseY1kRPi42B6C2gCxthV/96/DeVDxivSNV3WI2trsZOCKy22SW43582zMVhS/ufOJ0b+qjdlNeuV8omJGxRP6XVre2hV0FK56ibjML9opuPG32pysZ9DxBM8Vb/gPVB9ppcjYIS74IQ4ual3AZIpxfHDJdQHjTcUt20PlE3yWZQ9+KaOiOB+qforl5xdFsS7t4wtcNq3TFLEH6pw/clFRH1HYb4uuq9ZAF/8uoAvV91a85lpYFw3Bf5Yu6pfUhXpRoiZ44DGGOpihYtcXPBoOlSu4L1JjG8W74cBDLF4Kb0xL8Wdti37oBmkyPUWb4dSYDudccbGzFwhX5TmRh6UX+9V/aL6KftiIVnWgxhwIz2MHNX/IOiCm8qsaC/DhMU/QQd/g8zmqr8I5QtnnPjqj0eCkM3240jifLee97lWfO+n1J8PZZBiGJ71w0Qv7lzl3UsY3dqt7aTYI+fu9auxQ0ZpDRx18LlO2POsp1RwK7oR5bIz0r2o9pUn8sH7Y56r5EEsniPf1zPdUfmfbqI9+VfvCdydQfQx+9C4udajDl7TbtVUe/Wp4DKuN0U6g+jfrF2K/uetf0EXb4PoQ+r0P9Qj/NqwP3ctYH8KxTdut5w/Ot/ixUIblflN9RCqr/8SP0ChZd0lWg3+QyIcfd2ScqL+9HDi/Czg/XVvFiXt/WTFv8FnnA5GftluPzQNqh7yrw9P4cVaOeY9gWwSbhpt54rHLHsHyx/vUxwHT7pVeVJ/KcqkxnooxNb63thh/OPYwu2Qd9jc/yrtnY/A/SOhV/NKS3Ldlv8t6MQLlUz5/O0W+n0Ee+qG/mV7brecJj+rUfpXVoV+wjVQuyJLB4H8kcoHqy3C+H5d6tCrfOHkebFfkfAnjtRGtyq3yFcIXzVe8bovnH3lOo+btqHP+wK/pcMdlz9XYz34CNrKPh6l1vH3iXe0x8v/6QLpZuSjm87cUz0/COiGvi/AYFevUB408wcOm9cVnKY6cwKXyBOcCtWeQNY5RcWv4ryNusf/juFUf9EN4jttNcX4nOruq88Ts3xgzTapT8wuOmbi8SPTQX7DPtZjhOb9a0097yS5trfA0Ors2CP6PFKcVzcllv8vrwo/73o7KEUXPheTNEbgnVCRHqLU0lT84R6j5SNb+j4oB7g/VnIVjIC4vRKs845pxVl+p5nFVrtsFnflssOgMR8FwEHZO5kXW7Ty3nhd4/R5l89yqnnacXu83fHzu9kMxDmCc+B7i7WgdJ/OMPoz2O41WeTD4vwMPX69pnA2n9XA7Bec/MuajZb8EyzGixkF5zkJUs0Zzdj7EEW21Fmj0r+oshIpfZYesvSnVV5psRWIL6eY505O1tmTP1d5XVlwrWLVPirnD3mvYiQBvdAEbl93kvg70ER7XxBD+I5iL/hfGYY9gBb0Y7qiWDuelXB/hEM/q0eqzZrQOX4vW4Y32frTOo9W1oK5BdA6Se9QX4jI+GgTfSoDP3zGCNtb+WNDfI/orfItnvF/ZEvAtAR/bp54AnM/tgXbZMf6IJuHHZ8yb+U7s182U9uNy+DvPiSZ/DfirA39G3/wGbWpwxmuzGl4D9gvsjzEmTBaf4Pl3g559CvpHlBFthnLn8T+MS+NR5apWVAzXHuHa3QKX8aVicveSfClcO4RL5TF8hjFxC2Ki7HHqrD+Yzh5uMgeLR/8wpXOZ/eW0c7vP0ZgL3/tSe/08jjP4z9cucH4W8iu2V2MwtQbGvDiXvR+R9X9Zr/Gs/BP1sUd1XrDitfue8ZN3rzneCz5y6zZT/3AJ5w4vRWfXPHNqNW/OWne7ijk10sb9zDz7GiqOOc4R/jbE8RsUx1kfcso6i+QEvLK5+qimskuT6tR6sP3ez6Cj+Mpaa1R84XoRfxOB9xqzZMjyO7X3c43rvX213ouy41g1/sv7HRmDPxTwai+Gv+uAOldxyfsgSLdFdXnjEvdI3kjpS1GOvOfmdgDvczQXKGtcsex1Fov+qDedPvwVzsNN44r/AaBNnJmlhQAA","debug_symbols":"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","names":["decrement_guardian_count"],"brillig_names":["decrement_guardian_count"]},{"name":"increment_approval_count","hash":"8926538693968809450","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11556553965573010925":{"error_kind":"string","string":"Function increment_approval_count can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["increment_approval_count"],"brillig_names":["increment_approval_count"]},{"name":"increment_guardian_count","hash":"1577580652284543761","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14970808627057722807":{"error_kind":"string","string":"Function increment_guardian_count can only be called internally"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["increment_guardian_count"],"brillig_names":["increment_guardian_count"]},{"name":"initiate_blocking","hash":"11302885704381989846","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13488305543605632947":{"error_kind":"string","string":"Already blocked"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17022728796570737336":{"error_kind":"string","string":"Not a guardian"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["initiate_blocking"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","storage_read","get_public_data_witness","random","get_note_internal","notify_created_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"is_user_blocked","hash":"13605072054779945891","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["is_user_blocked"],"brillig_names":["is_user_blocked"]},{"name":"public_dispatch","hash":"6662757920344598939","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4846867431813379492":{"error_kind":"string","string":"Function set_public_block can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7049597037775588060":{"error_kind":"string","string":"Function check_block_user can only be called internally"},"11556553965573010925":{"error_kind":"string","string":"Function increment_approval_count can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14970808627057722807":{"error_kind":"string","string":"Function increment_guardian_count can only be called internally"},"15111608787814000058":{"error_kind":"string","string":"Function decrement_guardian_count can only be called internally"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"remove_guardian","hash":"9568004249405412249","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"guardian","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["remove_guardian"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"set_public_block","hash":"3713941616740913681","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4846867431813379492":{"error_kind":"string","string":"Function set_public_block can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1cW6skVxXefT/dfXq6Z6IQRMi7T9XV97fWzGRMwAQU0de+VOuQxIRJosGAtOBfECL45D+QQEQhTz74oOizL/4En0RBUDJ7Tq3T3/n6q+qq010nZ2AWNNVde9Vaa6/bXvtSXXI7KMXXKv12AmceX4PjoH9CWoEUNA0M52/li2sz/l2G9soJO9skvqekPw2Gy6bo3wnlHzRjmkXqx2gWQD9oxHRe2+7oc188dOLf6EP2zNmTz7nbff9S/L1JzxRh2wJ1H7wg5C9D3zy8vC2E98Do3wf67oR9M/oPipH/kv4rxch/mTceFiP/Jf1vxvSLkP3VYmQftt1FHP42VrqPzV5Me/Hjt994d/XOOvr6ev04eu89jGfOM2mQh2Y1B80XmebrH7z11qPNo+jxgw8fvff+Hu2aoG3fy073jeVCPIQa8fhKfPW6/R3otssyfyf60Tp6fJtU66grNSFTldoM96X46rv9h5gRD0se5vE1OBI6JI/Jh3zR7KcMnRLxc27fbsi/5fbtcMo0VCJ+Jg/rx1zYdFcXsvZEG/YN25BPXfC5KVpsbw/z+Brkg5BvdIRM7GcNkumavBlGWf3M+LcSdDQ/jTyXftYgeZJsZro7E7L2RBv7xpngcyb4PEu0zEc7bt9nSwlX48P3mA/muyrxqZ6QD+axOvGpn5AP0rIS1Pg0TsgHad3fXlwtttGu8/gaHAdDo43T2hPG6cJ01HL7YG1t4M0+eQ5t7EcdaGPb34G2BrV1oQ3jgaFCv1FP/rnPSju6jGfQdDqG5/Hv4DiYdUguBNa90i/qnvWLumf9ou5Zv6h7FQcGSr+mp+f63bXhmM5wSIf/yaBDXirheEXZawKXxyTTQVU87+H+9iotw/8hyN0rX5XteW39vLa+6ToFp9k25nu5PoRnODYq4llbcqsR/m9KO5ofxfe6bt+HstRpFgsF1duZY8H4t1yhsdlP8yvUD8dCQ8jaE23sv2qe0RB8bgMtzAW23Nh1+/5hzxY8dwxN1maKrMjfZMUxvUn9bqXQ8vAy9Ruft2ezjC2tYnSSOZ6M/02NLYf0yvHUFrL2RBv6HbYhn7bgo2idnZCW+YXyuSrxyTvXrgqZb9t8K6km9YBbFQyH5kYvQP3GeCwP6txkU3HL9lD5BO+l2cPwCo7zJevcif5nnePmnQdYn/LaA3VushU8RuT227zz9gbo4ms5dIE+0yZdFDTnzK2LppA/TRdn19RFQ+iiImTgGpRzZVLs1oWMRsP7oW3T77at3n/n8eIH0bejxbqU0MdSSr9K7upY64RMrRSZVN9bgl+L+Ck9pK3xhetRFMymy2m4XAwmy+FgOZst+oP+uN+fbtZhsB6Gm1F/PF7NotmmP9gsR9FiPFrMxut+FCzGa+ZVTukbj59qrFK6SRuDVX617+ekmyRdKvnPU+TvJMiPOPh8R8jfSZATZbqTIj/nTvT5eXwdBINBtAiH42gUjKPpbBrNJpvRJFgtNpv1JBiulsFyORwHA2/XSRgsw1nUH8yi0arvc0XfeHVJN3dE/61fPWjDtVC0LT7fc/u66SXoAG17l3TTFc/w77J4lm3bTeCNOGeij0k0VK5Q8t8Rz2SRn/V/N0H+pJxyV8iv7Gs0yuJ+Hh1UEmRlPuzzZZduI+WbeeKu4g77AMp1R8iFtM2H5djyjbfeWb35+gdvL/fPRSCNNDCe9xKexf5gPN0TNJTc3F+7X0t4juuXNtGZx7+D42BUI3n+FV/9+P5P6hf25TyhX+aDZXc4/2Bbkj+2CV+NXej3Ro/XBfFZ37f/Eo20+MoqK697dAX+3Zx9U/k/a99YDqSLvlYm/B7QUvhGj33n//HV6y8sX6VZhmcUTasny/Qbn80iP8ZpWdBnmyJfRZvnsVWBj3waTvcbZa8L+mqNDe3Ga8Ye5vE1OA5Cni+ejnYYNN1+nJwuf/Uvz9lg3WNgbRhzvHeH+T7vnN365P19lGNuhv51l3BNBlX3dwg3ad8P6TSpzcM8vgZHwfDStjxOnoZ+sOEzAE7oEvMj2/Zugm4YlG2tT3ltiz7UI1zMHTyG8rkU/t0SdFTOwFqd18s8zONrcBQMpwXbPuqI/hiwXyjb9xJ0x3BK26M9u4RrMpjt0WbnhMt7HA1Bp7icPb60Ldd4p6EfrDkPOqFLrBPZtt0E3TAo2+KrJHlsiz7E82HO2Vg/co7muajK2SqucT2iONtPgoLX2Fdq78LgumfFstoe19jz2B7reh6DuW5NspmK6zNBR9WIWEN26Z7/jvv2STUn3ks7V4GvIPFz8/ga5IMB3+Cx0ngj34LW6zOfjTb+Lbfva0Xs5ar9SnXOQPmkPdsTbXwGIe8+3LNAi3WDPltKuBofvsd8VJx1qA+n4IM4fEaziDNUHh5sr/K56bPRX/TYwn6j1sZVzcF+gLUm2+6YOcgtO1976/WLYybDc/3u2q6jXw/2umrR+i3ovM2t0m9WHeI5nTznw9FHO9SmxseC/wogc91l91puf/wtou6qkDysH/aBmpA17Xxyye2PuxVxL60mr5+IlgeM4WPlMh9T56astvCy/7J0lafpDfcC8NlXt7t2xP9VaUfz4/h7G2igP/EZLrQJyuLEs0l6UX5h+Glnm1GeruBnz/q89OX4O5+b+d7jR+9HjqB8oIMVgecIJykIUIEPtxdXNjQ+i4ZWCxhlwbsuZOG+5D1MlFRklRJ4M546fI0J/Wn/tvt0LFFXoe2ECWvogy2iF22wyK4BXwxO59InlIavJmA4iKRNwKrUho7PG2JVwQd9g32tLPjgix1F6n0yDQLzD7O5JS2GKrQj/qcxAV6Etv7MrynnZrLobwaLzWK0WK+Hq8U9ou9Ad+0C+C+jfjTYbDaDaDHcjDc3zn84GA6m08FmvViMJqPF8BB//M8SFeM8YJvfqpeWPdzfXlxrhP/HmEfBk4XgntCn8VL9q6T0jxcdPbyc0L9/wCD8p9Jhfl2n8wC2qTyT5VC5+VQtYx8M/6+xAJ7vR5BTPWBux01UD9Xt1f7N4/vBcSBzO24ccG5XB0UQn3P7ucBXL3z0CJ9zOf5GWqjzhySr6bDu9OI2/2mM4f8dbGSHSXrO7dUJ/CIL9p0XRiuCb9oLB17Of1M8F/TS3kSN6QZqUleitrQFUXWgN+0Fk5KQQU1OTRderp9RHDlBS+UJzgUN0Y+0F35uW02GdRTHrXphSy1yZ43zB9uLq3pZiv0bY6ZJbeoAE8eMh4fET700hTGTNO6mTZTNduqlWg/3txfXGuH/j+K0oA0bOe7yYZuCXqQdd9x+vjXouORxVuWPtA0lzhHq8EnWHGG6yJsjeNzBNrU5qvIHL9CUhFwqBng8VJszHAMeXtlelTnt8J8Hi6eu25evyNo5CNercRQ+md5Mxv1wts5TO5fcfl5Im8eV3FU91QU+0uMX71+MkdShUn6Z3wP/Z6aSOeufXRj+V0GGT8uaZtY/FDD8l4DmRwn9ckBT2cbup/3JhIoRVQd1BB/7zocBTpzXwhLxc04vDhv/ltuPlyIWh1X8KjuoFxB5vYRfBveQJ7aQL+cNFUdqUZTxmPahuFa4HXezuWs4WkxWi0m/Pxv2o2F/lCd3sZ1YLqZTSaGt8r8trhc8VwhVjeNOR7+fdvCg2HWNsJ81F/ABnaL/vEStp6qNkmI3McPAb8im1SxsG5SD69RiDvmFgZqT4WaRhyq04cG835evyljMmBP2i43RMFCHhCxve56v0ZhvtsE6QuVuXid5o7yj+a34u6onLU+1na6Vkw4nlgUuzzG45lZ6RXxcX1F9rVNfDf+7UDP9paxpov4aGWh+P6UOU/N1FfOGnzZfR3nU2ia/pI+y4xoB3zP7qLUhRzKUD9BmmTzghnHSSwpl8SwfdD5LkAnppK0rsK95YN/xwPtHau6G8WcHN+pboLvdPeOhEf+uAj3Ex9hE/EcQm2/S3Lcm+Hm8n6bg5a1Vqtur95rbffzKdh/feLe2+zJaWxvaasTnPP6N+kJaJkeN8H9CNjmDZ+z5nuB/RvyvyC3uYdwyrYq4Z/jePu/GPy73HoD3qeuOpzyJPt5j2cx3iqi7V6PxcvWk+A6ip39mEF6n7laHT73cP6e8i7la5V2eUxv+xxBvv6CxUB1yT9vrZ1mc02s4WQ7uqHW7y5h0egydx7+D4+CZ+jPwtHq6oH3UIdcPKI+ys6+/77h9m6maG2sqO9SUZX1TrWGm7YHcxPom8sYaMsses4pjjnPE/zXE8ScUx2rtt+T2a4w0G6bZXP3purJL2p/Rleh7K4WPkutQHclyqTrSCd6H+pDmd2of/gvcexupvTfsO47L/pO2B+6BbdAR+GpfvEf4qHMVl7wnjXzb1JY1LnE+9UnCWIr9wDzL9bKKTxyjT36OaRhG0Wg6XC6ffOuv+4fqisu+bnd4RaxFm//YOqmH6nYnUx305gFrVcO7/MOwYmS9PJtmtS3ug2Ctb30pEz5/r9G9P4MvYR/RN7HfWepqnG+YjGoO1t7mo3VGtBpH0DK51FyjcU25FK060VLzM7yHtf5nBdb64XQ6noXLYDhZrzbr4eBQTH4OnsUKzdVyAAA=","debug_symbols":"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","names":["set_public_block"],"brillig_names":["set_public_block"]},{"name":"sync_private_state","hash":"6656019669551830516","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["sync_private_state"],"brillig_names":["sync_private_state"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"GuardianBlocking::add_guardian_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::add_guardian_parameters","fields":[{"name":"guardian","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::approve_blocking_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::approve_blocking_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::check_block_user_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::check_block_user_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::constructor_parameters","fields":[{"name":"portal","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::decrement_guardian_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::decrement_guardian_count_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::increment_approval_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::increment_approval_count_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::increment_guardian_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::increment_guardian_count_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::initiate_blocking_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::initiate_blocking_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::is_user_blocked_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::is_user_blocked_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"GuardianBlocking::remove_guardian_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::remove_guardian_parameters","fields":[{"name":"guardian","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::set_public_block_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::set_public_block_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"GuardianBlocking::sync_private_state_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"GuardianBlocking::sync_private_state_parameters","fields":[]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"GuardianBlocking"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"config","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"user_guardians","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"approval_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"guardian_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"blocking_started","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"user_blocked","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"AddressNote"},{"kind":"struct","fields":[{"name":"address","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"51":{"source":"mod config;\n\nuse dep::aztec::macros::aztec;\n\n\n#[aztec]\npub contract GuardianBlocking {\n    use crate::config::Config;\n    use dep::value_note::value_note::ValueNote;\n    use dep::aztec::{\n        note::note_getter_options::NoteGetterOptions,\n        note::note_interface::NoteProperties,\n        note::note_viewer_options::NoteViewerOptions,\n        utils::comparison::Comparator,\n        macros::{functions::{initializer, internal, private, public, utility}, storage::storage},\n        prelude::{AztecAddress, EthAddress, Map, PrivateSet, SharedMutable, PublicImmutable, PrivateMutable},\n    };\n    use dep::aztec::protocol_types::traits::ToField;\n\n    global CHANGE_AUTHORIZED_DELAY_BLOCKS: u32 = 5;\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        // Map user -> Set of guardians\n        user_guardians: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n        // Map user -> number of guardian approvals\n        approval_count: Map<AztecAddress, SharedMutable<u32, CHANGE_AUTHORIZED_DELAY_BLOCKS, Context>, Context>,\n        // Map user -> total number of guardians\n        guardian_count: Map<AztecAddress, SharedMutable<u32, CHANGE_AUTHORIZED_DELAY_BLOCKS, Context>, Context>,\n        // Map user -> blocking initiated status\n        blocking_started: Map<AztecAddress, PrivateMutable<ValueNote, Context>, Context>,\n        // Map user -> final blocked status (1 = blocked, 0 = not blocked)\n        user_blocked: Map<AztecAddress, SharedMutable<u32, CHANGE_AUTHORIZED_DELAY_BLOCKS, Context>, Context>,\n    }\n\n    // ========== Init ==========\n    #[public]\n    #[initializer]\n    fn constructor(portal: EthAddress) {\n        storage.config.initialize(Config { portal });\n    }\n\n    // ========== Guardian Management ==========\n\n    #[private]\n    fn add_guardian(guardian: AztecAddress) {\n        let sender = context.msg_sender();\n        let note = ValueNote::new(1, guardian);\n        storage.user_guardians.at(sender).insert(note);\n        \n        // Schedule guardian count increment\n        GuardianBlocking::at(context.this_address()).increment_guardian_count(sender).enqueue(\n            &mut context\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn increment_guardian_count(user: AztecAddress) {\n        let current_count = storage.guardian_count.at(user).get_current_value();\n        storage.guardian_count.at(user).schedule_value_change(current_count + 1);\n    }\n\n    #[private]\n    fn remove_guardian(guardian: AztecAddress) {\n        let sender = context.msg_sender();\n\n        let removed_notes = storage.user_guardians.at(sender).pop_notes(NoteGetterOptions::new()\n            .select(ValueNote::properties().owner, Comparator.EQ, guardian)\n            .set_limit(1));\n            \n        if removed_notes.len() == 1 {\n            GuardianBlocking::at(context.this_address()).decrement_guardian_count(sender).enqueue(\n                &mut context\n            );\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn decrement_guardian_count(user: AztecAddress) {\n        let current_count = storage.guardian_count.at(user).get_current_value();\n        storage.guardian_count.at(user).schedule_value_change(current_count - 1);\n    }\n\n    // ========== Blocking Flow ==========\n\n    #[private]\n    fn initiate_blocking(user: AztecAddress) {\n        let sender = context.msg_sender();\n        let notes = storage.user_guardians.at(user).pop_notes(NoteGetterOptions::new()\n            .select(ValueNote::properties().owner, Comparator.EQ, sender)\n            .set_limit(1));\n        assert(notes.len() == 1, \"Not a guardian\");\n\n        let is_user_blocked = storage.user_blocked.at(user).get_current_value();\n        assert(is_user_blocked == 0, \"Already blocked\");\n\n        let note = ValueNote::new(1, user);\n        storage.blocking_started.at(user).replace(note);\n\n        // Initialize approval count\n        GuardianBlocking::at(context.this_address()).set_public_block(user).enqueue(\n            &mut context\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn set_public_block(user: AztecAddress) {\n        storage.approval_count.at(user).schedule_value_change(1);\n    }\n\n    #[private]\n    fn approve_blocking(user: AztecAddress) {\n        let sender = context.msg_sender();\n\n        let notes = storage.user_guardians.at(user).pop_notes(NoteGetterOptions::new()\n            .select(ValueNote::properties().owner, Comparator.EQ, sender)\n            .set_limit(1));\n        assert(notes.len() == 1, \"Not a guardian\");\n\n        let is_user_blocked = storage.user_blocked.at(user).get_current_value();\n        assert(is_user_blocked == 0, \"Already blocked\");\n\n        GuardianBlocking::at(context.this_address()).increment_approval_count(user).enqueue(\n            &mut context\n        );\n\n        GuardianBlocking::at(context.this_address()).check_block_user(user).enqueue(\n            &mut context\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn check_block_user(user: AztecAddress) {\n        let total_guardians = storage.guardian_count.at(user).get_current_value();\n        let scheduled_approvals = storage.approval_count.at(user).get_current_value();\n        if scheduled_approvals == total_guardians {\n            storage.user_blocked.at(user).schedule_value_change(1);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn increment_approval_count(user: AztecAddress) {\n        let current_approvals = storage.approval_count.at(user).get_current_value();\n        storage.approval_count.at(user).schedule_value_change(current_approvals + 1);\n    }\n\n    // ========== Utility ==========\n\n    #[utility]\n    unconstrained fn is_user_blocked(user: AztecAddress) -> bool {\n        storage.user_blocked.at(user).get_current_value() == 1\n    }\n}\n","path":"/home/dsotnyk/Desktop/bridge/packages/aztec-guardians/src/main.nr"},"54":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"55":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let N: u32, T> UtilityCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n}\n\nimpl<let N: u32> UtilityVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: () }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"62":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"63":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"65":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"69":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/hash.nr"},"81":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"86":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"90":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"91":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"95":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"98":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"100":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"101":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"103":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"104":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"105":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"107":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::fetch_tagged_logs},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"108":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"109":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"110":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"123":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"128":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"131":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"133":{"source":"use crate::{note::note_metadata::NoteMetadata, utils::array::subarray::subarray};\nuse protocol_types::{\n    address::AztecAddress,\n    traits::{FromField, Packable, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n// Number of fields a RetrievedNote adds to the packed or serialized representation of a note\n// +1 for the contract address\n// +2 for the note metadata\npub global RETRIEVED_NOTE_OVERHEAD: u32 = 1 + 2;\n\n/// A container of a note and the metadata required to prove its existence, regardless of whether the note is\n/// pending (created in the current transaction) or settled (created in a previous transaction).\n#[derive(Eq)]\npub struct RetrievedNote<NOTE> {\n    pub note: NOTE,\n    pub contract_address: AztecAddress,\n    pub metadata: NoteMetadata,\n}\n\nimpl<NOTE, let N: u32> Serialize<N + RETRIEVED_NOTE_OVERHEAD> for RetrievedNote<NOTE>\nwhere\n    NOTE: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + RETRIEVED_NOTE_OVERHEAD] {\n        array_concat(\n            array_concat(self.note.serialize(), [self.contract_address.to_field()]),\n            self.metadata.serialize(),\n        )\n    }\n}\n\n// This function is not part of the Packable trait implementation because in the case of the retrieved note, the pack\n// functionality resides in TS (oracle.ts and txe_service.ts).\npub fn unpack_retrieved_note<NOTE, let N: u32>(\n    packed_retrieved_note: [Field; N + RETRIEVED_NOTE_OVERHEAD],\n) -> RetrievedNote<NOTE>\nwhere\n    NOTE: Packable<N>,\n{\n    let contract_address = AztecAddress::from_field(packed_retrieved_note[0]);\n    let nonce = packed_retrieved_note[1];\n    let nonzero_note_hash_counter = packed_retrieved_note[2] as bool;\n\n    let packed_note = subarray(packed_retrieved_note, RETRIEVED_NOTE_OVERHEAD);\n    let note = NOTE::unpack(packed_note);\n\n    RetrievedNote {\n        note,\n        contract_address,\n        metadata: NoteMetadata::from_raw_data(nonzero_note_hash_counter, nonce),\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/note/retrieved_note.nr"},"134":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"138":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"139":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"140":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"141":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"142":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"146":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"147":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"148":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"149":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, length, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"150":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    // The log fields length is PUBLIC_LOG_SIZE_IN_FIELDS. + 1 because the contract address is prepended to the content.\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_SIZE_IN_FIELDS + 1>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"152":{"source":"use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"153":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"154":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"156":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"158":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"162":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nmod test;\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateMutable (and all other private state variables) needs just\n// one slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateMutable<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateMutable<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash,\n{\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<let N: u32>(self, new_note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let (prev_retrieved_note, note_hash_for_read_request): (RetrievedNote<Note>, Field) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(\n            self.context,\n            prev_retrieved_note,\n            note_hash_for_read_request,\n        );\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Safety: `check_nullifier_exists` is an unconstrained function - we can constrain a true value\n        // by providing an inclusion proof of the nullifier, but cannot constrain a false value since\n        // a non-inclusion proof would only be valid if done in public.\n        // Ultimately, this is not an issue given that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able\n        //    to produce an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious\n        // oracle (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce\n        // a proof.\n        let is_initialized =\n            unsafe { check_nullifier_exists(self.compute_initialization_nullifier()) };\n\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let mut (retrieved_note, note_hash_for_read_request) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, retrieved_note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, retrieved_note.note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateMutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"164":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateSet (and all other private state variables) needs just one\n// slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateSet<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"166":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"169":{"source":"use dep::protocol_types::{\n    shared_mutable::{\n        ScheduledDelayChange,\n        ScheduledValueChange,\n        shared_mutable_values::{unpack_delay_change, unpack_value_change},\n        SharedMutableValues,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u32, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change<let N: u32>(self, new_value: T)\n    where\n        T: Packable<N>,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change<let N: u32>(\n        self,\n        new_value: T,\n    ) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change<let N: u32>(self, new_delay: u32)\n    where\n        T: Packable<N>,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay<let N: u32>(self) -> u32\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value<let N: u32>(self) -> (T, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay<let N: u32>(self) -> (u32, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change<let N: u32>(self) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.block_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, N>(packed)\n    }\n\n    fn read_delay_change<let N: u32>(self) -> ScheduledDelayChange<INITIAL_DELAY>\n    where\n        T: Packable<N>,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because\n        // ScheduledValueChange and ScheduledDelayChange are packed together (sdc and svc.block_of_change are\n        // stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<INITIAL_DELAY>(packed)\n    }\n\n    fn write<let N: u32>(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    )\n    where\n        T: Packable<N>,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage<let N: u32>(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32)\n    where\n        T: Packable<N>,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_block_number)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let smv: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let block_number = self.context.block_number() as u32;\n        smv.svc.get_current_at(block_number)\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr"},"181":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"182":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"184":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"185":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"186":{"source":"struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/comparison.nr"},"187":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"188":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"190":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"192":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"196":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"203":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"220":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"222":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"265":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"266":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn to_be_bytes(self) -> [u8; 20] {\n        let field_bytes: [u8; 32] = self.inner.to_be_bytes();\n        let mut bytes = [0; 20];\n        for i in 0..20 {\n            bytes[i] = field_bytes[i + 12];\n        }\n        bytes\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"280":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"282":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"283":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"293":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"297":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"299":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"300":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"314":{"source":"use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u32>,\n    pub(crate) post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), block_of_change: 0 }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_delay_change.nr"},"316":{"source":"use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the block of change. Note that this value\n    // might not be the current anymore since block of change might have already passed.\n    pub fn get_previous(self) -> (T, u32) {\n        (self.pre, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), block_of_change: 0 }\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_value_change.nr"},"318":{"source":"use crate::{\n    hash::poseidon2_hash,\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.block_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct SharedMutableValues<T, let INITIAL_DELAY: u32> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let N: u32>(packed: [Field; 2 * N + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, N + 1);\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        packed[0] as u32,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u32>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc block_of_change. We'll discard the svc component.\n    let svc_block_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_block_of_change as Field) / TWO_POW_32;\n    let sdc_block_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_block_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner)\n        } else {\n            Option::none()\n        },\n        block_of_change: sdc_block_of_change,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the block_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Packable<2 * N + 1> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut result = [0; 2 * N + 1];\n\n        // We pack sdc.pre, sdc.post, sdc.block_of_change and svc.block_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.block_of_change: u32 | svc.block_of_change: u32 ]\n        result[0] = self.svc.block_of_change as Field\n            + ((self.sdc.block_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1]) -> Self {\n        let svc = unpack_value_change::<T, N>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Hash for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/shared_mutable_values.nr"},"321":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"339":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"340":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"356":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"357":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"359":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"369":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"378":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/home/dsotnyk/nargo/github.com/AztecProtocol/aztec-packages/v0.87.4/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}